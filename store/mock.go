// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package store is a generated GoMock package.
package store

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	minio_go "github.com/minio/minio-go"
)

// MockObjectStore is a mock of ObjectStore interface
type MockObjectStore struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStoreMockRecorder
}

// MockObjectStoreMockRecorder is the mock recorder for MockObjectStore
type MockObjectStoreMockRecorder struct {
	mock *MockObjectStore
}

// NewMockObjectStore creates a new mock instance
func NewMockObjectStore(ctrl *gomock.Controller) *MockObjectStore {
	mock := &MockObjectStore{ctrl: ctrl}
	mock.recorder = &MockObjectStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockObjectStore) EXPECT() *MockObjectStoreMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockObjectStore) Get(objectName string, opts minio_go.GetObjectOptions) (io.Reader, error) {
	ret := m.ctrl.Call(m, "Get", objectName, opts)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockObjectStoreMockRecorder) Get(objectName, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockObjectStore)(nil).Get), objectName, opts)
}

// Put mocks base method
func (m *MockObjectStore) Put(objectName string, reader io.Reader, size int64, opts minio_go.PutObjectOptions) (int64, error) {
	ret := m.ctrl.Call(m, "Put", objectName, reader, size, opts)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put
func (mr *MockObjectStoreMockRecorder) Put(objectName, reader, size, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockObjectStore)(nil).Put), objectName, reader, size, opts)
}

// Remove mocks base method
func (m *MockObjectStore) Remove(objectName string) error {
	ret := m.ctrl.Call(m, "Remove", objectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockObjectStoreMockRecorder) Remove(objectName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockObjectStore)(nil).Remove), objectName)
}

// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Blob Storage",
    "title": "Blobs",
    "contact": {
      "name": "Curtis Myzie",
      "email": "curtis.myzie@gmail.com"
    },
    "version": "0.0.1"
  },
  "paths": {
    "/blobs": {
      "get": {
        "summary": "List blobs",
        "operationId": "listBlobs",
        "parameters": [
          {
            "type": "integer",
            "description": "How many items to return at one time",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Offset into search results",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of blobs",
            "schema": {
              "$ref": "#/definitions/Blobs"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/BlobsError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Blob": {
      "description": "Binary Object",
      "type": "object",
      "properties": {
        "created_at": {
          "description": "Time when sound was added",
          "type": "string",
          "format": "dateTime"
        },
        "id": {
          "description": "Unique identifier",
          "type": "string"
        },
        "name": {
          "description": "User provided name",
          "type": "string"
        },
        "path": {
          "description": "Storage path",
          "type": "string",
          "maxLength": 200
        },
        "updated_at": {
          "description": "Time when sound was updated",
          "type": "string",
          "format": "dateTime"
        }
      }
    },
    "BlobAttributes": {
      "description": "Blob attributes set by the user",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "description": "Storage path",
          "type": "string",
          "maxLength": 200
        },
        "properties": {
          "type": "object",
          "additionalProperties": true
        }
      }
    },
    "Blobs": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Blob"
      }
    },
    "BlobsError": {
      "description": "Error that occurred while processing the request",
      "type": "object",
      "required": [
        "message",
        "code"
      ],
      "properties": {
        "code": {
          "description": "The error code",
          "type": "integer"
        },
        "message": {
          "description": "The error message",
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Blob Storage",
    "title": "Blobs",
    "contact": {
      "name": "Curtis Myzie",
      "email": "curtis.myzie@gmail.com"
    },
    "version": "0.0.1"
  },
  "paths": {
    "/blobs": {
      "get": {
        "summary": "List blobs",
        "operationId": "listBlobs",
        "parameters": [
          {
            "type": "integer",
            "description": "How many items to return at one time",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Offset into search results",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of blobs",
            "schema": {
              "$ref": "#/definitions/Blobs"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/BlobsError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Blob": {
      "description": "Binary Object",
      "type": "object",
      "properties": {
        "created_at": {
          "description": "Time when sound was added",
          "type": "string",
          "format": "dateTime"
        },
        "id": {
          "description": "Unique identifier",
          "type": "string"
        },
        "name": {
          "description": "User provided name",
          "type": "string"
        },
        "path": {
          "description": "Storage path",
          "type": "string",
          "maxLength": 200
        },
        "updated_at": {
          "description": "Time when sound was updated",
          "type": "string",
          "format": "dateTime"
        }
      }
    },
    "BlobAttributes": {
      "description": "Blob attributes set by the user",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "description": "Storage path",
          "type": "string",
          "maxLength": 200
        },
        "properties": {
          "type": "object",
          "additionalProperties": true
        }
      }
    },
    "Blobs": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Blob"
      }
    },
    "BlobsError": {
      "description": "Error that occurred while processing the request",
      "type": "object",
      "required": [
        "message",
        "code"
      ],
      "properties": {
        "code": {
          "description": "The error code",
          "type": "integer"
        },
        "message": {
          "description": "The error message",
          "type": "string"
        }
      }
    }
  }
}`))
}
